authentik:
  error_reporting:
    enabled: false  # opt-out of anonymous usage data

server:
  resources:
    requests: &REQUESTS
      cpu: 500m
      memory: 2Gi
    limits: *REQUESTS

  ingress:
    enabled: true
    ingressClassName: openshift-default
    annotations:
      cert-manager.io/issuer: letsencrypt
      acme.cert-manager.io/http01-ingress-class: openshift-default
    hosts: &HOSTS
      - auth.blt.chrisproject.org
    tls:
      - secretName: auth-blt-chrisproject-org-letsencrypt
        hosts: *HOSTS

worker:
  # Manually defined ServiceAccount, see `additionalObjects`
  serviceAccountName: "authentik"

serviceAccount:
  # doesn't work on OpenShift, see https://github.com/goauthentik/helm/issues/305
  create: false

geoip:
  # -- enable GeoIP sidecars for the authentik server and worker pods
  enabled: false  # temporarily disabling geoip updates because of rate limiting
  editionIds: "GeoLite2-City GeoLite2-ASN"
  # -- GeoIP update frequency, in hours
  updateInterval: 24
  ## use existing secret instead of values above
  existingSecret:
    # -- name of an existing secret to use instead of values above
    secretName: "maxmind-license"
    # -- key in the secret containing the account ID
    accountId: "account-id"
    # -- key in the secret containing the license key
    licenseKey: "license-key"

# Ref: https://github.com/bitnami/charts/blob/postgresql/12.12.10/bitnami/postgresql/README.md
postgresql:
  enabled: true
  architecture: standalone
  auth:
    username: authentik
    database: authentik
    existingSecret: trial-authentik-db-passwords
  primary:
    resources:
      requests: &POSTGRES_RESOURCES
        memory: 2Gi
        cpu: 500m
      limits: *POSTGRES_RESOURCES
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      enabled: true
      storageClass: ocs-external-storagecluster-ceph-rbd
      size: 4Gi
  backup:
    enabled: true
    cronjob:
      schedule: "@daily"
      concurrencyPolicy: ""
      failedJobsHistoryLimit: 2
      successfulJobsHistoryLimit: 2
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        runAsUser: null
        runAsGroup: null

# Ref: https://github.com/bitnami/charts/blob/redis/18.6.1/bitnami/redis/README.md
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 1Gi
      storageClass: ocs-external-storagecluster-ceph-rbd
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: Retain
      whenDeleted: Delete
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false

additionalObjects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata: &SA_METADATA
      name: authentik
      namespace: '{{ .Release.Namespace }}'
      labels:
        app.kubernetes.io/name: '{{ include "authentik.name" . }}'
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/part-of: authentik
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        helm.sh/chart: '{{ include "authentik.chart" . }}'
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata: *SA_METADATA
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: authentik
    subjects:
      - kind: ServiceAccount
        name: authentik
        namespace: '{{ .Release.Namespace }}'
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata: *SA_METADATA
    rules:
      - apiGroups:
          - ""
        resources:
          - secrets
          - services
          - configmaps
        verbs: &VERBS_RW
          - get
          - create
          - delete
          - list
          - patch
      - apiGroups:
          - extensions
          - apps
        resources:
          - deployments
        verbs: *VERBS_RW
      - apiGroups:
          - extensions
          - networking.k8s.io
        resources:
          - ingresses
        verbs: *VERBS_RW
      - apiGroups:
          - monitoring.coreos.com
        resources:
          - servicemonitors
        verbs: *VERBS_RW
